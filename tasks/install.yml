---
- name: "Check for phpipam installation"
  ansible.builtin.stat:
    path: '{{ phpipam_root }}/config.php'
  changed_when: false
  register: phpipam_install

- name: "Install tasks"
  when: not phpipam_install.stat.exists or phpipam_force_install|bool
  block:
    - name: "Install requirements"
      ansible.builtin.package:
        name: "{{ phpipam_requirements }}"
        state: present

    - name: "Ensure {{ web_root }} exist"
      ansible.builtin.file:
        path: "{{ web_root }}"
        owner: "{{ web_owner }}"
        group: "{{ web_group }}"
        mode: 0755
        state: directory

    - name: "Downloading phpipam {{ phpipam_version }}"
      ansible.builtin.get_url:
        url: "{{ phpipam_download }}"
        dest: "/opt/{{ phpipam_download_file }}"
        mode: '0644'

    - name: "Extracting phpipam package to {{ web_root }}"
      ansible.builtin.unarchive:
        src: "/opt/{{ phpipam_download_file }}"
        dest: "{{ web_root }}"
        owner: "{{ web_owner }}"
        group: "{{ web_group }}"
        remote_src: true

    - name: "Importing phpipam basic database"
      community.mysql.mysql_db:
        name: "{{ phpipam_db_name }}"
        state: import
        target: "{{ phpipam_root }}/db/SCHEMA.sql"
        force: true
      when: phpipam_db_custom_path|length == 0

    - name: "Copy custom config files"
      ansible.builtin.copy:
        src: '{{ phpipam_db_custom_path }}'
        dest: '{{ phpipam_root }}/db/phpipam.sql'
        owner: "{{ web_owner }}"
        group: "{{ web_group }}"
        mode: '0644'
      when: phpipam_db_custom_path is defined and phpipam_db_custom_path|length > 0

    - name: "Importing phpipam custom database"
      community.mysql.mysql_db:
        name: "{{ phpipam_db_name }}"
        state: import
        target: "{{ phpipam_root }}/db/phpipam.sql"
      when: phpipam_db_custom_path is defined and phpipam_db_custom_path|length > 0

- name: "Creating phpipam web config"
  ansible.builtin.template:
    src: "config.php.j2"
    dest: "{{ phpipam_root }}/config.php"
    owner: "{{ web_owner }}"
    group: "{{ web_group }}"
    mode: '0644'
    backup: true

- name: Tweak php-fpm vars
  ansible.builtin.lineinfile:
    dest: "/etc/php/{{ phpipam_php_version }}/fpm/pool.d/www.conf"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: present
  with_items:
    - {regexp: "^pm.max_children =", line: "pm.max_children = 40"}
    - {regexp: "^pm.start_servers =", line: "pm.start_servers = 15"}
    - {regexp: "^pm.min_spare_servers =", line: "pm.min_spare_servers = 15"}
    - {regexp: "^pm.max_spare_servers =", line: "pm.max_spare_servers = 25"}
    - {regexp: "^pm.max_requests =", line: "pm.max_requests = 500"}
  notify: restart php-fpm

## need to validate this is still needed as versions change
#- name: config_phpipam | patching functions-network.php
#  ansible.builtin.template:
#    src: "functions/functions-network.php.j2"
#    dest: "{{ phpipam_root }}/functions/functions-network.php"
#    owner: "{{ web_owner }}"
#    group: "{{ web_group }}"
#  when: >
#        phpipam_patch_discovery is defined and
#        phpipam_patch_discovery
#
## need to validate this is still needed as versions change
#- name: config_phpipam | patching email
#  ansible.builtin.template:
#    src: "functions/functions-mail.php.j2"
#    dest: "{{ phpipam_root }}/functions/functions-mail.php"
#    owner: "{{ web_owner }}"
#    group: "{{ web_group }}"
#  when: >
#        phpipam_patch_email is defined and
#        phpipam_patch_email
#
## need to validate this is still needed as versions change
#- name: config_phpipam | patching email
#  ansible.builtin.template:
#    src: "site/admin/mailSettingsTestMail.php.j2"
#    dest: "{{ phpipam_root }}/site/admin/mailSettingsTestMail.php"
#    owner: "{{ web_owner }}"
#    group: "{{ web_group }}"
#  when: >
#        phpipam_patch_email is defined and
#        phpipam_patch_email
#
## need to validate this is still needed as versions change
#- name: config_phpipam | adding dnsCheck.php script
#  ansible.builtin.template:
#    src: "functions/scripts/dnsCheck.php.j2"
#    dest: "{{ phpipam_root }}/functions/scripts/dnsCheck.php"
#    owner: "{{ web_owner }}"
#    group: "{{ web_group }}"
#    mode: 0755
#  when: >
#        phpipam_patch_discovery is defined and
#        phpipam_patch_discovery
#
## need to validate this is still needed as versions change
#- name: config_phpipam | checking for fping path
#  ansible.builtin.command: which fping
#  register: fping_path
#  changed_when: false
#
## need to validate this is still needed as versions change
#- name: config_phpipam | adding fpingDiscovery script(s)
#  ansible.builtin.template:
#    src: "functions/scripts/{{ item }}.j2"
#    dest: "{{ phpipam_root }}/functions/scripts/{{ item }}"
#    owner: "{{ web_owner }}"
#    group: "{{ web_group }}"
#    mode: 0755
#  with_items:
#    - fpingDiscoveryCheck.php
#    - fpingThread.php
#  when: >
#        phpipam_patch_discovery is defined and
#        phpipam_patch_discovery
#
#- name: config_phpipam | Ensuring Permissions Are Correctly Set
#  ansible.builtin.file:
#    path: "{{ phpipam_root }}"
#    group: "{{ web_group }}"
#    owner: "{{ web_owner }}"
#    state: "directory"
#    recurse: yes
#  when: phpipam_install_from_git # Only run when is not coming from git

- name: config_phpipam | Ensuring Permissions Are Correctly Set
  ansible.builtin.file:
    path: "{{ phpipam_root }}"
    group: "{{ web_group }}"
    owner: "{{ web_owner }}"
    state: "directory"
    recurse: true


#- name: Adding cron job for discoveryCheck
#  ansible.builtin.cron:
#    name: phpipam discoveryCheck
#    job: "/usr/bin/php {{ phpipam_root }}/functions/scripts/discoveryCheck.php"
#    minute: "*/15"
#    hour: "*"
#    day: "*"
#    month: "*"
#    user: "{{ web_owner }}"
#    cron_file: phpipam_discoveryCheck
#    state: present
#  when: phpipam_define_cron_jobs

- name: Ading cron job for pingCheck
  ansible.builtin.cron:
    name: phpipam pingCheck
    job: "/usr/bin/php {{ phpipam_root }}/functions/scripts/pingCheck.php"
    minute: "*/15"
    hour: "*"
    day: "*"
    month: "*"
    user: "{{ web_owner }}"
    cron_file: phpipam_pingCheck
    state: present
  when: phpipam_define_cron_jobs

#- name: Aadding cron job for resolveIPaddresses
#  ansible.builtin.cron:
#    name: phpipam resolveIPaddresses
#    job: "/usr/bin/php {{ phpipam_root }}/functions/scripts/resolveIPaddresses.php"
#    minute: "0"
#    hour: "*"
#    day: "*"
#    month: "*"
#    user: "{{ web_owner }}"
#    cron_file: phpipam_resolveIPaddresses
#    state: present
#  when: phpipam_define_cron_jobs
